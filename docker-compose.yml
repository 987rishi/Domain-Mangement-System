services:
  ziti-controller:
    image: "${ZITI_IMAGE}:${ZITI_VERSION}"
    healthcheck:
      test: curl -m 1 -s -k -f https://${ZITI_CTRL_EDGE_ADVERTISED_ADDRESS:-ziti-edge-controller}:${ZITI_CTRL_EDGE_ADVERTISED_PORT:-1280}/edge/client/v1/version
      interval: 1s
      timeout: 3s
      retries: 30
    env_file:
      - ./.env
    ports:
      - ${ZITI_INTERFACE:-0.0.0.0}:${ZITI_CTRL_EDGE_ADVERTISED_PORT:-1280}:${ZITI_CTRL_EDGE_ADVERTISED_PORT:-1280}
      - ${ZITI_INTERFACE:-0.0.0.0}:${ZITI_CTRL_ADVERTISED_PORT:-6262}:${ZITI_CTRL_ADVERTISED_PORT:-6262}
    environment:
      - ZITI_CTRL_NAME=${ZITI_CTRL_NAME:-ziti-edge-controller}
      - ZITI_CTRL_EDGE_ADVERTISED_ADDRESS=${ZITI_CTRL_EDGE_ADVERTISED_ADDRESS:-ziti-edge-controller}
      - ZITI_CTRL_EDGE_ADVERTISED_PORT=${ZITI_CTRL_EDGE_ADVERTISED_PORT:-1280}
      - ZITI_CTRL_EDGE_IP_OVERRIDE=${ZITI_CTRL_EDGE_IP_OVERRIDE:-127.0.0.1}
      - ZITI_CTRL_ADVERTISED_PORT=${ZITI_CTRL_ADVERTISED_PORT:-6262}
      - ZITI_EDGE_IDENTITY_ENROLLMENT_DURATION=${ZITI_EDGE_IDENTITY_ENROLLMENT_DURATION}
      - ZITI_ROUTER_ENROLLMENT_DURATION=${ZITI_ROUTER_ENROLLMENT_DURATION}
      - ZITI_USER=${ZITI_USER:-admin}
      - ZITI_PWD=${ZITI_PWD}
    networks:
      ziti:
        aliases:
          - ziti-edge-controller
    volumes:
      - ziti-fs:/persistent
    entrypoint:
      - "/var/openziti/scripts/run-controller.sh"

  ziti-controller-init-container:
    image: "${ZITI_IMAGE}:${ZITI_VERSION}"
    depends_on:
      ziti-controller:
        condition: service_healthy
    environment:
      - ZITI_CTRL_EDGE_ADVERTISED_ADDRESS=${ZITI_CTRL_EDGE_ADVERTISED_ADDRESS:-ziti-edge-controller}
      - ZITI_CTRL_EDGE_ADVERTISED_PORT=${ZITI_CTRL_EDGE_ADVERTISED_PORT:-1280}
    env_file:
      - ./.env
    networks:
      ziti:
    volumes:
      - ziti-fs:/persistent
    entrypoint:
      - "/var/openziti/scripts/run-with-ziti-cli.sh"
    command:
      - "/var/openziti/scripts/access-control.sh"

  ziti-edge-router:
    image: "${ZITI_IMAGE}:${ZITI_VERSION}"
    env_file:
      - ./.env
    depends_on:
      ziti-controller:
        condition: service_healthy
    ports:
      - ${ZITI_INTERFACE:-0.0.0.0}:${ZITI_ROUTER_PORT:-3022}:${ZITI_ROUTER_PORT:-3022}
      - ${ZITI_INTERFACE:-0.0.0.0}:${ZITI_ROUTER_LISTENER_BIND_PORT:-10080}:${ZITI_ROUTER_LISTENER_BIND_PORT:-10080}
    environment:
      - ZITI_CTRL_ADVERTISED_ADDRESS=${ZITI_CTRL_ADVERTISED_ADDRESS:-ziti-controller}
      - ZITI_CTRL_ADVERTISED_PORT=${ZITI_CTRL_ADVERTISED_PORT:-6262}
      - ZITI_CTRL_EDGE_ADVERTISED_ADDRESS=${ZITI_CTRL_EDGE_ADVERTISED_ADDRESS:-ziti-edge-controller}
      - ZITI_CTRL_EDGE_ADVERTISED_PORT=${ZITI_CTRL_EDGE_ADVERTISED_PORT:-1280}
      - ZITI_ROUTER_NAME=${ZITI_ROUTER_NAME:-ziti-edge-router}
      - ZITI_ROUTER_ADVERTISED_ADDRESS=${ZITI_ROUTER_ADVERTISED_ADDRESS:-ziti-edge-router}
      - ZITI_ROUTER_PORT=${ZITI_ROUTER_PORT:-3022}
      - ZITI_ROUTER_LISTENER_BIND_PORT=${ZITI_ROUTER_LISTENER_BIND_PORT:-10080}
      - ZITI_ROUTER_ROLES=public
    networks:
      - ziti
    volumes:
      - ziti-fs:/persistent
    entrypoint: /bin/bash
    command: "/var/openziti/scripts/run-router.sh edge"

  ziti-console:
    image: openziti/zac
    working_dir: /usr/src/app
    environment:
      - ZAC_SERVER_CERT_CHAIN=/persistent/pki/${ZITI_CTRL_EDGE_ADVERTISED_ADDRESS:-ziti-edge-controller}-intermediate/certs/${ZITI_CTRL_EDGE_ADVERTISED_ADDRESS:-ziti-edge-controller}-server.cert
      - ZAC_SERVER_KEY=/persistent/pki/${ZITI_CTRL_EDGE_ADVERTISED_ADDRESS:-ziti-edge-controller}-intermediate/keys/${ZITI_CTRL_EDGE_ADVERTISED_ADDRESS:-ziti-edge-controller}-server.key
      - ZITI_CTRL_EDGE_ADVERTISED_ADDRESS=${ZITI_CTRL_EDGE_ADVERTISED_ADDRESS:-ziti-edge-controller}
      - ZITI_CTRL_EDGE_ADVERTISED_PORT=${ZITI_CTRL_EDGE_ADVERTISED_PORT:-1280}
      - ZITI_CTRL_NAME=${ZITI_CTRL_NAME:-ziti-edge-controller}
      - PORTTLS=8443
    depends_on:
      ziti-controller:
        condition: service_healthy
    ports:
      - ${ZITI_INTERFACE:-0.0.0.0}:8443:8443
    volumes:
      - ziti-fs:/persistent
    networks:
      - ziti

  service-registry:
    container_name: service-registry
    image: weakpassword/serviceregistry:dev.v2
    env_file:
      - .env
    networks:
      - ziti
      - logging-network
    volumes:
      - registry-logs:/var/log/app
    depends_on:
      ziti-controller:
        condition: service_healthy
      logstash:
        condition: service_healthy


  workflow-service:
    container_name: workflow-service
    image: weakpassword/workflowipvaptservice:dev.v2
    env_file:
      - .env
    volumes:
      - workflow-logs:/var/log/app
    networks:
      - ziti
      - logging-network
    depends_on:
      - service-registry
      - logstash
    
    
  notification-service:
    container_name: notification-service
    image: weakpassword/notificationmicroservice:ziti.v1
    env_file:
      - .env
    volumes:
      - notification-logs:/var/log/app
    networks:
      - ziti
      - logging-network
    depends_on:
      - service-registry
      - notification-service-db
      - logstash
  
  renewal-service:
    container_name: renewal-service
    image: dnms-local/renewalandtransfermicroservice:dev.v1.0.0
    build:
      context: ./RenewalAndTransferMicroService
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - renewal-logs:/var/log/app
    networks:
      - ziti
      - logging-network
    depends_on:
      - service-registry
      - renewal-service-db
      - logstash
    
  user-management-service:
    container_name: user-management-service
    image: versatile7programmer/ums:dev.v1
    env_file:
      - .env
    volumes:
      - user-management-logs:/var/log/app
    networks:
      - ziti
      - logging-network
    depends_on:
      - service-registry
      - user-management-service-db
      - openldap
      - logstash

    
 

    

  

    
   

  

  api-gateway:
    container_name: api_gateway
    image: weakpassword/apigateway:ziti.v1
    ports:
      - "8085:8085"
    env_file:
      - .env
    volumes:
      - api-gateway-logs:/var/log/app
    networks:
      - ziti
      - logging-network
    depends_on:
      - service-registry
    
 

  

  workflow-service-db:
    image: postgres:16-alpine3.21
    container_name: workflow-service-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=workflow_db
    volumes:
      - workflow-service-db-volume:/var/lib/postgresql/data
    networks:
      - ziti
  
  notification-service-db:
    image: postgres:16-alpine3.21
    container_name: notification-service-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=notification_db
    volumes:
      - notification-service-db-volume:/var/lib/postgresql/data
    networks:
      - ziti
  
  renewal-service-db:
    image: postgres:16-alpine3.21
    container_name: renewal-service-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=renewal_db
    volumes:
      - renewal-service-db-volume:/var/lib/postgresql/data
    networks:
      - ziti

  user-management-service-db:
    image: postgres:16-alpine3.21
    container_name: user-management-service-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=user_management_db
    volumes:
      - user-management-service-db-volume:/var/lib/postgresql/data
      - ../dump_files/dumpfileUMM.dump:/docker-entrypoint-initdb.d/user_management_db.dump
      - ../db_init_scripts/init-db-usermanagement.sh:/docker-entrypoint-initdb.d/init-user-db.sh
    networks:
      - ziti

  openldap:
    image: osixia/openldap:latest
    container_name: openldap
    environment:
      LDAP_BASE_DN: "dc=cdac,dc=in,dc=world"
      LDAP_ORGANISATION: "CDAC"
      LDAP_DOMAIN: "cdac.in.world"
      LDAP_ADMIN_PASSWORD: "raju"
      LDAP_TLS: "false"             # deactivate TLS for the LDAP server
    volumes:
      - ../ldap/ldap-initial-data/cdacNew.ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom/50-bootstrap.ldif
    networks:
      - ziti
    command: --copy-service
    restart: unless-stopped
  
  # phpldapadmin:
  #   image: osixia/phpldapadmin:latest
  #   container_name: phpldapadmin
  #   environment:
  #     PHPLDAPADMIN_LDAP_HOSTS: openldap
  #     PHPLDAPADMIN_HTTPS: "false"   # deactivate HTTPS
  #   networks:
  #     - ldap-net
  #   ports:
  #     - "8081:80"
  #   restart: unless-stopped
  #   depends_on:
  #     - openldap

  elasticsearch:
    image: elasticsearch:8.14.0
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\\|yellow\"'"]
      interval: 30s
      timeout: 15s
      retries: 10
    networks:
      - logging-network
    restart: unless-stopped

  mongodb:
    image: mongo:6.0
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodata:/data/db
    networks:
      - logging-network
    restart: unless-stopped

  kibana:
    image: kibana:8.14.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - logging-network
    restart: unless-stopped

  logstash:
    build:
      context: ./ELK/logstash
      # dockerfile: Dockerfile
    container_name: logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./ELK/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./archived-logs:/usr/share/logstash/archived-logs # archived-logs on host bind mount to container

    depends_on:
      elasticsearch:
        condition: service_healthy
      mongodb:
        condition: service_started
    networks:
      - logging-network
    restart: unless-stopped

  filebeat:
    image: elastic/filebeat:8.14.0
    container_name: filebeat
    user: root
    command: filebeat -e --strict.perms=false
    volumes:
      - ./ELK/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - workflow-logs:/var/log/workflow-service:ro
      - notification-logs:/var/log/notification-service:ro
      - renewal-logs:/var/log/renewal-service:ro
      - user-management-logs:/var/log/user-management-service:ro
      - api-gateway-logs:/var/log/api-gateway:ro
    depends_on:
      - logstash
    networks:
      - logging-network
    restart: unless-stopped


volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  workflow-service-db-volume:
  notification-service-db-volume:
  renewal-service-db-volume:
  user-management-service-db-volume:
  
  # Logging Volumes
  workflow-logs:
  notification-logs:
  renewal-logs:
  user-management-logs:
  api-gateway-logs:
  registry-logs:
  all-logs:
  esdata:
  mongodata:

  # ziti-volumes
  ziti-fs:
  ziti-host:

networks:
  ziti:
    driver: bridge
  logging-network:
    driver: bridge
  