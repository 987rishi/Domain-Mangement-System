
# services:
#   service-registry:
#     container_name: service-registry
#     build:
#       context: ./ServiceRegistry
#       dockerfile: Dockerfile
#     env_file:
#       - .env
#     networks:
#       - application-network

#   workflow-service:
#     container_name: workflow-service
#     build:
#       context: ./WorkFlowIpVaptService
#       dockerfile: Dockerfile
#     env_file:
#       - .env
#     networks:
#       - application-network
#       - workflow-service-db-network
#     depends_on:
#       - service-registry

#   notification-service:
#     container_name: notification-service
#     build:
#       context: ./NotificationMicroservice
#       dockerfile: Dockerfile
#     env_file:
#       - .env
#     environment:
#       - EUREKA_HOST=service-registry
#       - EUREKA_PORT=8761
#     networks:
#       - application-network
#       - notification-service-db-network
#     depends_on:
#       - service-registry
#       - notification-service-db
  
#   renewal-service:
#     container_name: renewal-service
#     build:
#       context: ./RenewalAndTransferMicroService
#       dockerfile: Dockerfile
#     env_file:
#       - .env
#     environment:
#       - EUREKA_HOST=service-registry
#       - EUREKA_PORT=8761
#     networks:
#       - application-network
#       - renewal-service-db-network
#     depends_on:
#       - service-registry
#       - renewal-service-db
    
#   user-management-service:
#     container_name: user-management-service
#     build:
#       context: ./UserManagementMicroservice/server
#       dockerfile: Dockerfile
#     env_file:
#       - .env
#     environment:
#       - EUREKA_HOST=service-registry
#       - EUREKA_PORT=8761
#     networks:
#       - application-network
#       - user-management-service-db-network
#       - ldap-net
#     depends_on:
#       - service-registry
#       - user-management-service-db
#       - openldap


#   api-gateway:
#     container_name: api_gateway
#     build:
#       context: ./ApiGateway
#       dockerfile: Dockerfile
#     ports:
#       - "8085:8085"
#     env_file:
#       - .env
#     networks:
#       - application-network
#     depends_on:
#       - service-registry

  
#   sonarqube:
#     image: 4f01870f15a6
#     container_name: sonarqube
#     ports:
#       - "9000:9000"
#     volumes:
#       - sonarqube_data:/opt/sonarqube/data
#       - sonarqube_extensions:/opt/sonarqube/extensions
#       - sonarqube_logs:/opt/sonarqube/logs


#   workflow-service-db:
#     image: postgres:16-alpine3.21
#     container_name: workflow_db
#     # ports:
#     #   - "5432:5432"
#     environment:
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=1234
#       - POSTGRES_DB=workflow_db
#     volumes:
#       - workflow-service-db-volume:/var/lib/postgresql/data
#     networks:
#       - workflow-service-db-network
  
#   notification-service-db:
#     image: postgres:16-alpine3.21
#     container_name: notification_db
#     # ports:
#     #   - "5432:5432"
#     environment:
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=1234
#       - POSTGRES_DB=notification_db
#     volumes:
#       - notification-service-db-volume:/var/lib/postgresql/data
#     networks:
#       - notification-service-db-network
  
#   renewal-service-db:
#     image: postgres:16-alpine3.21
#     container_name: renewal_db
#     # ports:
#     #   - "5432:5432"
#     environment:
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=1234
#       - POSTGRES_DB=renewal_db
#     volumes:
#       - renewal-service-db-volume:/var/lib/postgresql/data
#     networks:
#       - renewal-service-db-network

#   user-management-service-db:
#     image: postgres:16-alpine3.21
#     container_name: user_management_db
#     # ports:
#     #   - "5432:5432"
#     environment:
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=1234
#       - POSTGRES_DB=user_management_db
#     volumes:
#       - user-management-service-db-volume:/var/lib/postgresql/data
#     networks:
#       - user-management-service-db-network

#   openldap:
#     image: osixia/openldap:latest
#     container_name: openldap
#     environment:
#       LDAP_BASE_DN: "dc=cdac,dc=in,dc=world"
#       LDAP_ORGANISATION: "CDAC"
#       LDAP_DOMAIN: "cdac.in.world"
#       LDAP_ADMIN_PASSWORD: "raju"
#       LDAP_TLS: "false"             # deactivate TLS for the LDAP server
#     volumes:
#       - ./ldap/ldap-initial-data/text.ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom/50-bootstrap.ldif
#     networks:
#       - ldap-net
#     ports:
#       - "389:389"                   # default port for unsecured LDAP
#     command: --copy-service
#     restart: unless-stopped
  
#   phpldapadmin:
#     image: osixia/phpldapadmin:latest
#     container_name: phpldapadmin
#     environment:
#       PHPLDAPADMIN_LDAP_HOSTS: openldap
#       PHPLDAPADMIN_HTTPS: "false"   # deactivate HTTPS
#     networks:
#       - ldap-net
#     ports:
#       - "8081:80"
#     restart: unless-stopped
#     depends_on:
#       - openldap

# volumes:
#   sonarqube_data:
#   sonarqube_extensions:
#   sonarqube_logs:
#   workflow-service-db-volume:
#   notification-service-db-volume:
#   renewal-service-db-volume:
#   user-management-service-db-volume:
#   ldap_data:
#   ldap_config:


# networks:
#   application-network:
#     driver: bridge
#   workflow-service-db-network:
#     driver: bridge
#   notification-service-db-network:
#     driver: bridge
#   renewal-service-db-network:
#     driver: bridge
#   user-management-service-db-network:
#     driver: bridge
#   ldap-net:
#     driver: bridge
  



  
services:
  service-registry:
    container_name: service-registry
    image: weakpassword/serviceregistry:dev.v2
    env_file:
      - .env
    networks:
      - application-network

  workflow-service:
    container_name: workflow-service
    image: weakpassword/workflowipvaptservice:dev.v2
    env_file:
      - .env
    environment:
      - SPRING_CLOUD_INETUTILS_PREFERRED_NETWORKS=cdacdnsmanagementsystem_application-network
    volumes:
      - workflow-logs:/var/log/app
    networks:
      - application-network
      - workflow-service-db-network
      - logging-network
    depends_on:
      - service-registry
      - logstash

  notification-service:
    container_name: notification-service
    image: weakpassword/notificationmicroservice:latest
    env_file:
      - .env
    environment:
      - EUREKA_HOST=service-registry
      - EUREKA_PORT=8761
    volumes:
      - notification-logs:/var/log/app
    networks:
      - application-network
      - notification-service-db-network
      - logging-network
    depends_on:
      - service-registry
      - notification-service-db
      - logstash
  
  renewal-service:
    container_name: renewal-service
    image: dnms-local/renewalandtransfermicroservice:dev.v1.0.0
    env_file:
      - .env
    environment:
      - EUREKA_HOST=service-registry
      - EUREKA_PORT=8761
    volumes:
      - renewal-logs:/var/log/app
    networks:
      - application-network
      - renewal-service-db-network
      - logging-network
    depends_on:
      - service-registry
      - renewal-service-db
      - logstash
    
  user-management-service:
    container_name: user-management-service
    image: versatile7programmer/ums:dev.v1
    env_file:
      - .env
    environment:
      - EUREKA_HOST=service-registry
      - EUREKA_PORT=8761
    volumes:
      - user-management-logs:/var/log/app
    networks:
      - application-network
      - user-management-service-db-network
      - ldap-net
      - logging-network
    depends_on:
      - service-registry
      - user-management-service-db
      - openldap
      - logstash

  api-gateway:
    container_name: api_gateway
    image: weakpassword/apigateway:dev.v2
    ports:
      - "8085:8085"
    env_file:
      - .env
    volumes:
      - api-gateway-logs:/var/log/app
    networks:
      - application-network
      - logging-network
    depends_on:
      - service-registry

  workflow-service-db:
    image: postgres:16-alpine3.21
    container_name: workflow_db
    # ports:
    #   - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=workflow_db
    volumes:
      - workflow-service-db-volume:/var/lib/postgresql/data
    networks:
      - workflow-service-db-network
  
  notification-service-db:
    image: postgres:16-alpine3.21
    container_name: notification_db
    # ports:
    #   - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=notification_db
    volumes:
      - notification-service-db-volume:/var/lib/postgresql/data
    networks:
      - notification-service-db-network
  
  renewal-service-db:
    image: postgres:16-alpine3.21
    container_name: renewal_db
    # ports:
    #   - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=renewal_db
    volumes:
      - renewal-service-db-volume:/var/lib/postgresql/data
    networks:
      - renewal-service-db-network

  user-management-service-db:
    image: postgres:16-alpine3.21
    container_name: user_management_db
    # ports:
    #   - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=user_management_db
    volumes:
      - user-management-service-db-volume:/var/lib/postgresql/data
      - ./dump_files/dumpfileUMM.dump:/docker-entrypoint-initdb.d/user_management_db.dump
      - ./db_init_scripts/init-db-usermanagement.sh:/docker-entrypoint-initdb.d/init-user-db.sh
    networks:
      - user-management-service-db-network

  openldap:
    image: osixia/openldap:latest
    container_name: openldap
    environment:
      LDAP_BASE_DN: "dc=cdac,dc=in,dc=world"
      LDAP_ORGANISATION: "CDAC"
      LDAP_DOMAIN: "cdac.in.world"
      LDAP_ADMIN_PASSWORD: "raju"
      LDAP_TLS: "false"             # deactivate TLS for the LDAP server
    volumes:
      - ./ldap/ldap-initial-data/cdacNew.ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom/50-bootstrap.ldif
    networks:
      - ldap-net
    ports:
      - "389:389"                   # default port for unsecured LDAP
    command: --copy-service
    restart: unless-stopped
  
  phpldapadmin:
    image: osixia/phpldapadmin:latest
    container_name: phpldapadmin
    environment:
      PHPLDAPADMIN_LDAP_HOSTS: openldap
      PHPLDAPADMIN_HTTPS: "false"   # deactivate HTTPS
    networks:
      - ldap-net
    ports:
      - "8081:80"
    restart: unless-stopped
    depends_on:
      - openldap

  elasticsearch:
    image: elasticsearch:8.14.0
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\\|yellow\"'"]
      interval: 30s
      timeout: 15s
      retries: 10
    networks:
      - logging-network
    restart: unless-stopped

  mongodb:
    image: mongo:6.0
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodata:/data/db
    networks:
      - logging-network
    restart: unless-stopped

  kibana:
    image: kibana:8.14.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - logging-network
    restart: unless-stopped

  logstash:
    build:
      context: ./ELK/logstash
      # dockerfile: Dockerfile
    container_name: logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./ELK/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./archived-logs:/usr/share/logstash/archived-logs # archived-logs on host bind mount to container

    depends_on:
      elasticsearch:
        condition: service_healthy
      mongodb:
        condition: service_started
    networks:
      - logging-network
    restart: unless-stopped

  filebeat:
    image: elastic/filebeat:8.14.0
    container_name: filebeat
    user: root
    command: filebeat -e --strict.perms=false
    volumes:
      - ./ELK/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - workflow-logs:/var/log/workflow-service:ro
      - notification-logs:/var/log/notification-service:ro
      - renewal-logs:/var/log/renewal-service:ro
      - user-management-logs:/var/log/user-management-service:ro
      - api-gateway-logs:/var/log/api-gateway:ro
    depends_on:
      - logstash
    networks:
      - logging-network
    restart: unless-stopped


volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  workflow-service-db-volume:
  notification-service-db-volume:
  renewal-service-db-volume:
  user-management-service-db-volume:
  prometheus-data:
  grafana-data:
  
  # Logging Volumes
  workflow-logs:
  notification-logs:
  renewal-logs:
  user-management-logs:
  api-gateway-logs:
  all-logs:
  esdata:
  mongodata:


networks:
  application-network:
    driver: bridge
  workflow-service-db-network:
    driver: bridge
  notification-service-db-network:
    driver: bridge
  renewal-service-db-network:
    driver: bridge
  user-management-service-db-network:
    driver: bridge
  ldap-net:
    driver: bridge
  logging-network:
    driver: bridge
  